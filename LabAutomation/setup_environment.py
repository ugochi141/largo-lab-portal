#!/usr/bin/env python3
"""
Environment Setup Script for Lab Crisis Automation
This script helps you set up your environment variables securely
"""

import os
import sys

def create_env_file():
    """Create .env file with user input"""
    print("🔧 Lab Crisis Automation - Environment Setup")
    print("=" * 50)
    print("This script will help you set up your environment variables securely.")
    print("Your credentials will be stored in a .env file (not committed to git).")
    print()
    
    # Check if .env already exists
    if os.path.exists('.env'):
        overwrite = input("⚠️  .env file already exists. Overwrite? (y/N): ").lower()
        if overwrite != 'y':
            print("❌ Setup cancelled.")
            return False
    
    print("📝 Please enter your credentials:")
    print()
    
    # Get user input
    notion_token = input("🔑 Notion API Token: ").strip()
    performance_db = input("📊 Performance Database ID: ").strip()
    incident_db = input("🚨 Incident Database ID: ").strip()
    lab_management = input("🏢 Lab Management Center ID: ").strip()
    teams_webhook = input("💬 Teams Webhook URL: ").strip()
    
    # Optional Power BI settings
    print("\n🔍 Power BI Settings (optional - press Enter to skip):")
    powerbi_workspace = input("📈 Power BI Workspace ID: ").strip()
    monitor_dataset = input("📊 Monitor Dataset ID: ").strip()
    monitor_push_url = input("📤 Monitor Push URL: ").strip()
    metrics_dataset = input("📈 Metrics Dataset ID: ").strip()
    metrics_push_url = input("📤 Metrics Push URL: ").strip()
    
    # Create .env file
    env_content = f"""# Lab Crisis Automation Environment Variables
# Generated by setup_environment.py

# Notion API Configuration
NOTION_API_TOKEN={notion_token}
NOTION_VERSION=2022-06-28

# Notion Database IDs
NOTION_PERFORMANCE_DB_ID={performance_db}
NOTION_INCIDENT_DB_ID={incident_db}
NOTION_LAB_MANAGEMENT_CENTER={lab_management}

# Power BI Configuration (Optional)
POWERBI_WORKSPACE_ID={powerbi_workspace}
POWERBI_MONITOR_DATASET_ID={monitor_dataset}
POWERBI_MONITOR_PUSH_URL={monitor_push_url}
POWERBI_METRICS_DATASET_ID={metrics_dataset}
POWERBI_METRICS_PUSH_URL={metrics_push_url}

# Teams Integration
TEAMS_WEBHOOK_URL={teams_webhook}

# Logging Configuration
LOG_LEVEL=INFO
LOG_FILE_PATH=logs/lab_automation.log
AUDIT_LOG_PATH=logs/audit_trail.log

# Alert Thresholds
TAT_THRESHOLD_MINUTES=30
PERFORMANCE_SCORE_THRESHOLD=60
ERROR_RATE_THRESHOLD=2
BREAK_TIME_THRESHOLD_MINUTES=15
QC_COMPLETION_THRESHOLD=95

# Operational Settings
MONITORING_INTERVAL_SECONDS=300
ALERT_COOLDOWN_MINUTES=15
MAX_RETRY_ATTEMPTS=3
REQUEST_TIMEOUT_SECONDS=30
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n✅ Environment file created successfully!")
        print("📁 Location: .env")
        print("🔒 This file is ignored by git for security")
        
        # Create logs directory
        os.makedirs('logs', exist_ok=True)
        print("📁 Created logs directory")
        
        return True
        
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")
        return False

def test_connection():
    """Test the connection with provided credentials"""
    print("\n🧪 Testing connection...")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        from notion_client import Client
        import requests
        
        # Test Notion connection
        notion_token = os.getenv('NOTION_API_TOKEN')
        if notion_token:
            notion = Client(auth=notion_token)
            # Try to get a page to test connection
            print("✅ Notion API token loaded")
        else:
            print("❌ Notion API token not found")
            return False
        
        # Test Teams webhook
        teams_webhook = os.getenv('TEAMS_WEBHOOK_URL')
        if teams_webhook:
            print("✅ Teams webhook URL loaded")
        else:
            print("❌ Teams webhook URL not found")
            return False
        
        print("✅ All credentials loaded successfully!")
        return True
        
    except ImportError:
        print("⚠️  Some packages not installed. Run: pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"❌ Connection test failed: {e}")
        return False

def main():
    """Main setup function"""
    print("🚨 Lab Crisis Automation - Setup Script")
    print("=" * 50)
    
    # Create environment file
    if not create_env_file():
        sys.exit(1)
    
    # Test connection
    if test_connection():
        print("\n🎉 Setup completed successfully!")
        print("\n📋 Next Steps:")
        print("1. Run: python scripts/secure_crisis_monitor.py")
        print("2. Check Teams for test alerts")
        print("3. Verify Notion databases are updated")
        print("4. Run: ./push_to_github.sh (to push to GitHub)")
    else:
        print("\n⚠️  Setup completed with warnings.")
        print("Please check your credentials and try again.")

if __name__ == "__main__":
    main()
